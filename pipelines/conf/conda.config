executor = 'local'

docker {
    enabled = false
}

process {
    withName: demuxingReads {
		conda = 'environments/demuxingReads/environment.yaml'
		cpus = params.cpus
		memory = params.mem
	}

    withName: referenceAlignment {
        conda = 'environments/readSubsampling/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }    

    withName: assemblingReadsRG {
        conda = 'environments/readSubsampling/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: assemblingReadsDN {
        if (params.assembler == 'miniasm') {
            conda = 'environments/assemblyWithMiniasm/environment.yaml'
        }
        else {
            conda = 'environments/assemblyWithRedbean/environment.yaml'
        }
        cpus = params.cpus
        memory = params.mem
    }

    withName: correctingAssemblyWithRacon {
        conda = 'environments/correctingAssemblyWithRacon/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: subsamplingReads {
        conda = 'environments/readSubsampling/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: nanopolishIndexing {
        conda = 'environments/polishingWithNanopolish/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: polishingWithMedaka {
        conda = 'environments/polishingWithMedaka/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: polishingWithNanopolish {
        conda = 'environments/polishingWithNanopolish/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: repolishingWithMedaka {
        conda = 'environments/polishingWithMedaka/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }

    withName: repolishingWithNanopolish {
        conda = 'environments/polishingWithNanopolish/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }   

    withName: assessAssemblies {
        conda = 'environments/assessAssemblies/environment.yaml'
        cpus = params.cpus
        memory = params.mem
    }
}