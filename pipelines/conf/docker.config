executor = 'local'

docker {
    enabled = true
}

process {
            withName: demuxingReads {
        		container = 'willrowe/qcat:latest'
        		cpus = params.cpus
        		memory = params.mem
        	}

            withName: assemblingReads {
                if (params.assembler == 'miniasm') {
                    container = 'willrowe/miniasm:latest'
                }
                else {
                    container = 'willrowe/redbean:latest'
                }
                cpus = params.cpus
                memory = params.mem
            }

            withName: correctingAssemblyWithRacon {
                container = 'willrowe/racon:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: subsamplingReads {
                container = 'willrowe/pomoxis:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: nanopolishIndexing {
                container = 'willrowe/nanopolish:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: polishingWithMedaka {
                container = 'willrowe/medaka:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: polishingWithNanopolish {
                container = 'willrowe/nanopolish:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: repolishingWithMedaka {
                container = 'willrowe/medaka:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: repolishingWithNanopolish {
                container = 'willrowe/nanopolish:latest'
                cpus = params.cpus
                memory = params.mem
            }

            withName: assessAssemblies {
                container = 'willrowe/quast:latest'
                cpus = params.cpus
                memory = params.mem
            }
}
